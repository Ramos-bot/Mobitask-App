import React, { useState, useEffect } from 'react';
import {
    View, Text, ScrollView, TouchableOpacity, StyleSheet,
    Switch, Alert, StatusBar
} from 'react-native';
import NotificationManager from '../shared/services/NotificationManager';

export default function NotificationSettingsScreen({ user, onBack }) {
    const [settings, setSettings] = useState({
        enabled: true,
        sound: true,
        vibration: true,
        badge: true,
        types: {
            system: true,
            client: true,
            analysis: true,
            tasks: true,
            alerts: true
        },
        quiet_hours: {
            enabled: false,
            start: '22:00',
            end: '08:00'
        }
    });

    const [loading, setLoading] = useState(true);

    useEffect(() => {
        loadSettings();
    }, []);

    const loadSettings = async () => {
        try {
            const currentSettings = NotificationManager.getSettings();
            setSettings(currentSettings);
        } catch (error) {
            console.error('Erro ao carregar configura√ß√µes:', error);
        } finally {
            setLoading(false);
        }
    };

    const updateSetting = async (key, value) => {
        try {
            const newSettings = { ...settings };

            if (key.includes('.')) {
                const [parent, child] = key.split('.');
                newSettings[parent][child] = value;
            } else {
                newSettings[key] = value;
            }

            setSettings(newSettings);
            await NotificationManager.saveSettings(newSettings);

            // Se desabilitar notifica√ß√µes, cancelar todas as agendadas
            if (key === 'enabled' && !value) {
                Alert.alert(
                    'Notifica√ß√µes Desabilitadas',
                    'Todas as notifica√ß√µes agendadas foram canceladas',
                    [
                        {
                            text: 'OK',
                            onPress: () => NotificationManager.cancelAllNotifications()
                        }
                    ]
                );
            }

        } catch (error) {
            Alert.alert('Erro', 'N√£o foi poss√≠vel salvar as configura√ß√µes');
            console.error('Erro ao salvar configura√ß√µes:', error);
        }
    };

    const handleTestNotification = async () => {
        try {
            await NotificationManager.sendImmediateNotification({
                title: 'üß™ Teste de Notifica√ß√£o',
                body: 'Esta √© uma notifica√ß√£o de teste do Mobitask',
                data: { type: 'system' },
                priority: 'medium'
            });
            Alert.alert('Sucesso', 'Notifica√ß√£o de teste enviada!');
        } catch (error) {
            Alert.alert('Erro', 'N√£o foi poss√≠vel enviar a notifica√ß√£o de teste');
        }
    };

    const renderSettingItem = ({ title, description, value, onValueChange, disabled = false }) => (
        <View style={[styles.settingItem, disabled && styles.settingItemDisabled]}>
            <View style={styles.settingInfo}>
                <Text style={[styles.settingTitle, disabled && styles.settingTitleDisabled]}>
                    {title}
                </Text>
                {description && (
                    <Text style={[styles.settingDescription, disabled && styles.settingDescriptionDisabled]}>
                        {description}
                    </Text>
                )}
            </View>
            <Switch
                value={value}
                onValueChange={onValueChange}
                disabled={disabled}
                trackColor={{ false: '#e0e0e0', true: '#1e88e5' }}
                thumbColor={value ? '#fff' : '#f4f3f4'}
            />
        </View>
    );

    const renderTypeItem = ({ type, title, icon, description }) => (
        <View key={type} style={styles.typeItem}>
            <View style={styles.typeIcon}>
                <Text style={styles.typeIconText}>{icon}</Text>
            </View>
            <View style={styles.typeInfo}>
                <Text style={styles.typeTitle}>{title}</Text>
                <Text style={styles.typeDescription}>{description}</Text>
            </View>
            <Switch
                value={settings.types[type]}
                onValueChange={(value) => updateSetting(`types.${type}`, value)}
                disabled={!settings.enabled}
                trackColor={{ false: '#e0e0e0', true: '#1e88e5' }}
                thumbColor={settings.types[type] ? '#fff' : '#f4f3f4'}
            />
        </View>
    );

    if (loading) {
        return (
            <View style={styles.loadingContainer}>
                <Text style={styles.loadingText}>Carregando configura√ß√µes...</Text>
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <StatusBar barStyle="light-content" backgroundColor="#1565C0" />

            {/* Header */}
            <View style={styles.header}>
                <TouchableOpacity style={styles.backButton} onPress={onBack}>
                    <Text style={styles.backIcon}>‚Äπ</Text>
                </TouchableOpacity>
                <Text style={styles.headerTitle}>Configura√ß√µes de Notifica√ß√µes</Text>
                <View style={styles.placeholder} />
            </View>

            <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
                {/* Configura√ß√µes Gerais */}
                <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Geral</Text>
                    <View style={styles.sectionContent}>
                        {renderSettingItem({
                            title: 'Ativar Notifica√ß√µes',
                            description: 'Receber notifica√ß√µes do Mobitask',
                            value: settings.enabled,
                            onValueChange: (value) => updateSetting('enabled', value)
                        })}

                        {renderSettingItem({
                            title: 'Som',
                            description: 'Reproduzir som ao receber notifica√ß√µes',
                            value: settings.sound,
                            onValueChange: (value) => updateSetting('sound', value),
                            disabled: !settings.enabled
                        })}

                        {renderSettingItem({
                            title: 'Vibra√ß√£o',
                            description: 'Vibrar ao receber notifica√ß√µes',
                            value: settings.vibration,
                            onValueChange: (value) => updateSetting('vibration', value),
                            disabled: !settings.enabled
                        })}

                        {renderSettingItem({
                            title: 'Badge no √çcone',
                            description: 'Mostrar contador no √≠cone da app',
                            value: settings.badge,
                            onValueChange: (value) => updateSetting('badge', value),
                            disabled: !settings.enabled
                        })}
                    </View>
                </View>

                {/* Tipos de Notifica√ß√£o */}
                <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Tipos de Notifica√ß√£o</Text>
                    <View style={styles.sectionContent}>
                        {renderTypeItem({
                            type: 'system',
                            title: 'Sistema',
                            icon: '‚öôÔ∏è',
                            description: 'Atualiza√ß√µes, backups e manuten√ß√£o'
                        })}

                        {renderTypeItem({
                            type: 'client',
                            title: 'Clientes',
                            icon: 'üë§',
                            description: 'Novos clientes e altera√ß√µes'
                        })}

                        {renderTypeItem({
                            type: 'analysis',
                            title: 'An√°lises',
                            icon: 'üß™',
                            description: 'Resultados de an√°lises conclu√≠das'
                        })}

                        {renderTypeItem({
                            type: 'tasks',
                            title: 'Tarefas',
                            icon: 'üìã',
                            description: 'Lembretes e tarefas pendentes'
                        })}

                        {renderTypeItem({
                            type: 'alerts',
                            title: 'Alertas',
                            icon: '‚ö†Ô∏è',
                            description: 'Alertas cr√≠ticos e urgentes'
                        })}
                    </View>
                </View>

                {/* Hor√°rio Silencioso */}
                <View style={styles.section}>
                    <Text style={styles.sectionTitle}>Hor√°rio Silencioso</Text>
                    <View style={styles.sectionContent}>
                        {renderSettingItem({
                            title: 'Ativar Hor√°rio Silencioso',
                            description: 'Silenciar notifica√ß√µes durante determinadas horas',
                            value: settings.quiet_hours?.enabled || false,
                            onValueChange: (value) => updateSetting('quiet_hours.enabled', value),
                            disabled: !settings.enabled
                        })}

                        {settings.quiet_hours?.enabled && (
                            <View style={styles.quietHoursContainer}>
                                <Text style={styles.quietHoursText}>
                                    Das {settings.quiet_hours.start} √†s {settings.quiet_hours.end}
                                </Text>
                                <TouchableOpacity
                                    style={styles.quietHoursButton}
                                    onPress={() => Alert.alert('Em breve', 'Configura√ß√£o de hor√°rios em desenvolvimento')}
                                >
                                    <Text style={styles.quietHoursButtonText}>Alterar Hor√°rios</Text>
                                </TouchableOpacity>
                            </View>
                        )}
                    </View>
                </View>

                {/* A√ß√µes */}
                <View style={styles.section}>
                    <Text style={styles.sectionTitle}>A√ß√µes</Text>
                    <View style={styles.sectionContent}>
                        <TouchableOpacity
                            style={styles.actionButton}
                            onPress={handleTestNotification}
                            disabled={!settings.enabled}
                        >
                            <Text style={styles.actionButtonIcon}>üß™</Text>
                            <View style={styles.actionButtonInfo}>
                                <Text style={styles.actionButtonTitle}>Enviar Teste</Text>
                                <Text style={styles.actionButtonDescription}>
                                    Enviar uma notifica√ß√£o de teste
                                </Text>
                            </View>
                            <Text style={styles.actionButtonArrow}>‚Ä∫</Text>
                        </TouchableOpacity>

                        <TouchableOpacity
                            style={styles.actionButton}
                            onPress={() => {
                                Alert.alert(
                                    'Limpar Notifica√ß√µes',
                                    'Cancelar todas as notifica√ß√µes agendadas?',
                                    [
                                        { text: 'Cancelar', style: 'cancel' },
                                        {
                                            text: 'Confirmar',
                                            style: 'destructive',
                                            onPress: () => {
                                                NotificationManager.cancelAllNotifications();
                                                Alert.alert('Sucesso', 'Notifica√ß√µes canceladas');
                                            }
                                        }
                                    ]
                                );
                            }}
                        >
                            <Text style={styles.actionButtonIcon}>üóëÔ∏è</Text>
                            <View style={styles.actionButtonInfo}>
                                <Text style={styles.actionButtonTitle}>Limpar Agendadas</Text>
                                <Text style={styles.actionButtonDescription}>
                                    Cancelar todas as notifica√ß√µes agendadas
                                </Text>
                            </View>
                            <Text style={styles.actionButtonArrow}>‚Ä∫</Text>
                        </TouchableOpacity>
                    </View>
                </View>

                {/* Info */}
                <View style={styles.infoSection}>
                    <Text style={styles.infoText}>
                        As configura√ß√µes de notifica√ß√£o s√£o salvas localmente no seu dispositivo.
                        Algumas configura√ß√µes podem requerer reinicializa√ß√£o da aplica√ß√£o.
                    </Text>
                </View>
            </ScrollView>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f8f9fa',
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingHorizontal: 20,
        paddingTop: 50,
        paddingBottom: 20,
        backgroundColor: '#1565C0',
    },
    backButton: {
        padding: 8,
    },
    backIcon: {
        fontSize: 24,
        color: '#fff',
        fontWeight: 'bold',
    },
    headerTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        color: '#fff',
        flex: 1,
        textAlign: 'center',
    },
    placeholder: {
        width: 40,
    },
    content: {
        flex: 1,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f8f9fa',
    },
    loadingText: {
        fontSize: 16,
        color: '#666',
    },
    section: {
        marginBottom: 25,
    },
    sectionTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#333',
        paddingHorizontal: 20,
        marginBottom: 10,
    },
    sectionContent: {
        backgroundColor: '#fff',
    },
    settingItem: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 20,
        paddingVertical: 15,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
    },
    settingItemDisabled: {
        opacity: 0.5,
    },
    settingInfo: {
        flex: 1,
        marginRight: 15,
    },
    settingTitle: {
        fontSize: 16,
        fontWeight: '600',
        color: '#333',
        marginBottom: 3,
    },
    settingTitleDisabled: {
        color: '#999',
    },
    settingDescription: {
        fontSize: 12,
        color: '#666',
    },
    settingDescriptionDisabled: {
        color: '#999',
    },
    typeItem: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 20,
        paddingVertical: 15,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
    },
    typeIcon: {
        width: 40,
        height: 40,
        borderRadius: 20,
        backgroundColor: '#f5f5f5',
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: 15,
    },
    typeIconText: {
        fontSize: 18,
    },
    typeInfo: {
        flex: 1,
        marginRight: 15,
    },
    typeTitle: {
        fontSize: 16,
        fontWeight: '600',
        color: '#333',
        marginBottom: 3,
    },
    typeDescription: {
        fontSize: 12,
        color: '#666',
    },
    quietHoursContainer: {
        paddingHorizontal: 20,
        paddingVertical: 15,
        backgroundColor: '#f8f9fa',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
    quietHoursText: {
        fontSize: 14,
        color: '#666',
    },
    quietHoursButton: {
        backgroundColor: '#1e88e5',
        paddingHorizontal: 15,
        paddingVertical: 8,
        borderRadius: 6,
    },
    quietHoursButtonText: {
        color: '#fff',
        fontSize: 12,
        fontWeight: '600',
    },
    actionButton: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 20,
        paddingVertical: 15,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
    },
    actionButtonIcon: {
        fontSize: 20,
        marginRight: 15,
    },
    actionButtonInfo: {
        flex: 1,
        marginRight: 15,
    },
    actionButtonTitle: {
        fontSize: 16,
        fontWeight: '600',
        color: '#333',
        marginBottom: 3,
    },
    actionButtonDescription: {
        fontSize: 12,
        color: '#666',
    },
    actionButtonArrow: {
        fontSize: 18,
        color: '#ccc',
        fontWeight: 'bold',
    },
    infoSection: {
        paddingHorizontal: 20,
        paddingVertical: 20,
    },
    infoText: {
        fontSize: 12,
        color: '#999',
        textAlign: 'center',
        lineHeight: 18,
    },
});
